#ifdef USE_OPENCV
#include <opencv2/core/core.hpp>
#endif  // USE_OPENCV
#include <stdint.h>

#include <string>
#include <vector>

#include "caffe/common.hpp"
#include "caffe/data_layers.hpp"
#include "caffe/layer.hpp"
#include "caffe/proto/caffe.pb.h"
#include "caffe/util/benchmark.hpp"
#include "caffe/util/io.hpp"

namespace caffe {

template <typename Dtype>
DataLayer<Dtype>::DataLayer(const LayerParameter& param)
  : BasePrefetchingDataLayer<Dtype>(param),
    reader_(param) {
}

template <typename Dtype>
DataLayer<Dtype>::~DataLayer() {
  this->StopInternalThread();
}

template <typename Dtype>
void DataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,
      const vector<Blob<Dtype>*>& top) {
  const int batch_size = this->layer_param_.data_param().batch_size();
  // Read a data point, and use it to initialize the top blob.
  Datum& datum = *(reader_.full().peek());

  // Use data_transformer to infer the expected blob shape from datum.
  vector<int> top_shape = this->data_transformer_->InferBlobShape(datum);
  this->transformed_data_.Reshape(top_shape);
  this->transformed_label_.Reshape(top_shape[0],1,1,1);
  // Reshape top[0] and prefetch_data according to the batch_size.
  top_shape[0] = batch_size;
  top[0]->Reshape(top_shape);
  for (int i = 0; i < this->PREFETCH_COUNT; ++i) {
    this->prefetch_[i].data_.Reshape(top_shape);
  }
  LOG(INFO) << "output data size: " << top[0]->num() << ","
      << top[0]->channels() << "," << top[0]->height() << ","
      << top[0]->width();
  // label
  if (this->output_labels_) {
    vector<int> label_shape(1, batch_size);
    top[1]->Reshape(label_shape);
    for (int i = 0; i < this->PREFETCH_COUNT; ++i) {
      this->prefetch_[i].label_.Reshape(label_shape);
    }
  }
}


// This function is called on prefetch thread
template<typename Dtype>
void DataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {
  CPUTimer batch_timer;
  batch_timer.Start();
  double read_time = 0;
  double trans_time = 0;
  CPUTimer timer;
  CHECK(batch->data_.count());
  CHECK(this->transformed_data_.count());

  // Reshape according to the first datum of each batch
  // on single input batches allows for inputs of varying dimension.
  const int batch_size = this->layer_param_.data_param().batch_size();
  Datum& datum = *(reader_.full().peek());
  // Use data_transformer to infer the expected blob shape from datum.
  vector<int> top_shape = this->data_transformer_->InferBlobShape(datum);
  this->transformed_data_.Reshape(top_shape);
  // Reshape batch according to the batch_size.
  top_shape[0] = batch_size;
  batch->data_.Reshape(top_shape);

  Dtype* top_data = batch->data_.mutable_cpu_data();
  Dtype* top_label = NULL;  // suppress warnings about uninitialized variables

  if (this->output_labels_) {
    top_label = batch->label_.mutable_cpu_data();
  }
  for (int item_id = 0; item_id < batch_size; ++item_id) {
    timer.Start();
    // get a datum
    Datum& datum = *(reader_.full().pop("Waiting for data"));
    read_time += timer.MicroSeconds();
    timer.Start();
    // Apply data transformations (mirror, scale, crop...)
    int offset = batch->data_.offset(item_id);
    this->transformed_data_.set_cpu_data(top_data + offset);
    this->data_transformer_->Transform(datum, &(this->transformed_data_));
    // Copy label.
    if (this->output_labels_) {
      top_label[item_id] = datum.label();
      int offset_label = batch->label_.offset(item_id);
      this->transformed_label_.set_cpu_data(top_label+offset);
    }
    trans_time += timer.MicroSeconds();

    reader_.free().push(const_cast<Datum*>(&datum));
  }
  timer.Stop();
  batch_timer.Stop();
  DLOG(INFO) << "Prefetch batch: " << batch_timer.MilliSeconds() << " ms.";
  DLOG(INFO) << "     Read time: " << read_time / 1000 << " ms.";
  DLOG(INFO) << "Transform time: " << trans_time / 1000 << " ms.";
}

template <typename Dtype>
void DataLayer<Dtype>:: ReadData(shared_ptr<leveldb::Iterator>& liter_,
 	MDB_cursor *lmdb_cursor_,
	Blob<Dtype>& lprefetch_data_, 
	Blob<Dtype>& lprefetch_label_) {
	
}


/*
template <typename Dtype>
void DataLayer<Dtype>::ReadData(shared_ptr<leveldb::Iterator>& liter_,
 	MDB_cursor *lmdb_cursor_,
	Blob<Dtype>& lprefetch_data_, 
	Blob<Dtype>& lprefetch_label_) {
	Datum datum;
  CHECK(lprefetch_data_.count());
  Dtype* top_data = lprefetch_data_.mutable_cpu_data();
  Dtype* top_label = NULL;  // suppress warnings about uninitialized variables
	MDB_val lmdb_key_, lmdb_value_;//TODO maybe can put them out
  if (this->output_labels_) {
     top_label = lprefetch_label_.mutable_cpu_data();
  }
  const int batch_size = this->layer_param_.data_param().batch_size();
  for (int item_id = 0; item_id < batch_size; ++item_id) {
    // get a blob
    switch (this->layer_param_.data_param().backend()) {
    case DataParameter_DB_LEVELDB:
      CHECK(liter_);
      CHECK(liter_->Valid());
      datum.ParseFromString(liter_->value().ToString());
      break;
    case DataParameter_DB_LMDB:
      CHECK_EQ(mdb_cursor_get(lmdb_cursor_, &lmdb_key_,
              &lmdb_value_, MDB_GET_CURRENT), MDB_SUCCESS);
      datum.ParseFromArray(lmdb_value_.mv_data,
          lmdb_value_.mv_size);
      break;
    default:
      LOG(FATAL) << "Unknown database backend";
    }

    // Apply data transformations (mirror, scale, crop...)
   (*(this->data_transformer_)).Transform(datum, top_data);

    if (this->output_labels_) {
      top_label[item_id] = datum.label();
    }

    // go to the next iter
    switch (this->layer_param_.data_param().backend()) {
    case DataParameter_DB_LEVELDB:
      liter_->Next();
      if (!liter_->Valid()) {
        // We have reached the end. Restart from the first.
        DLOG(INFO) << "Restarting data prefetching from start.";
        liter_->SeekToFirst();
      }
      break;
    case DataParameter_DB_LMDB:
      if (mdb_cursor_get(lmdb_cursor_, &lmdb_key_,
              &lmdb_value_, MDB_NEXT) != MDB_SUCCESS) {
        // We have reached the end. Restart from the first.
        DLOG(INFO) << "Restarting data prefetching from start.";
        CHECK_EQ(mdb_cursor_get(lmdb_cursor_, &lmdb_key_,
                &lmdb_value_, MDB_FIRST), MDB_SUCCESS);
      }
      break;
    default:
      LOG(FATAL) << "Unknown database backend";
    }
  }
}
*/
template <typename Dtype>
void DataLayer<Dtype>::reshapeData(Blob<Dtype>& lprefetch_data_ , Blob<Dtype>& lprefetch_label_) {
  int crop_size = this->layer_param_.transform_param().crop_size();
  LOG(INFO) << "Crop Size: "<<crop_size;
  if (crop_size > 0) {
    lprefetch_data_.Reshape(this->layer_param_.data_param().batch_size(),
        this->datum_channels_, crop_size, crop_size);
  } else {
    lprefetch_data_.Reshape(this->layer_param_.data_param().batch_size(),
         this->datum_channels_, this->datum_height_, this->datum_width_);
  }
  if (this->output_labels_) {
    lprefetch_label_.Reshape(this->layer_param_.data_param().batch_size(),
        1, 1, 1);
  }
}

template <typename Dtype>
void DataLayer<Dtype>::getLeveldbIter(shared_ptr<leveldb::Iterator>& liter_){
        liter_.reset(db_->NewIterator(leveldb::ReadOptions()));
        if (this->layer_param_.data_param().rand_skip()){
DBGPRT(LOG(INFO)<<"Skip ");
                        liter_->Seek(iter_->key());//TODO need test
        }
}

template <typename Dtype>
void DataLayer<Dtype>::getMdbCursor(MDB_cursor** cursor){
                CHECK_EQ(mdb_cursor_open(mdb_txn_, mdb_dbi_, cursor), MDB_SUCCESS)
      << "mdb_cursor_open failed";
        if (this->layer_param_.data_param().rand_skip()){
                CHECK_EQ(mdb_cursor_get(*cursor, &mdb_key_,
                &mdb_value_, MDB_SET), MDB_SUCCESS);//TODO need test
        }
}
template <typename Dtype>
bool DataLayer<Dtype>::getOutputLabel(){
        return this->output_labels_;
}


INSTANTIATE_CLASS(DataLayer);
REGISTER_LAYER_CLASS(Data);

}  // namespace caffe
